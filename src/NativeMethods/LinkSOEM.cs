// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;
using AUTD3Sharp.Utils;
using AUTD3Sharp.Link;


namespace AUTD3Sharp.NativeMethods
{
    internal static unsafe partial class NativeMethodsLinkSOEM
    {
        const string __DllName = "autd3capi_link_soem";



        [DllImport(__DllName, EntryPoint = "AUTDAdapterPointer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern EthernetAdaptersPtr AUTDAdapterPointer();

        [DllImport(__DllName, EntryPoint = "AUTDAdapterGetSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint AUTDAdapterGetSize(EthernetAdaptersPtr adapters);

        [DllImport(__DllName, EntryPoint = "AUTDAdapterGetAdapter", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void AUTDAdapterGetAdapter(EthernetAdaptersPtr adapters, uint idx, byte* desc, byte* name);

        [DllImport(__DllName, EntryPoint = "AUTDAdapterPointerDelete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void AUTDAdapterPointerDelete(EthernetAdaptersPtr adapters);

        [DllImport(__DllName, EntryPoint = "AUTDLinkSOEMTracingInit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void AUTDLinkSOEMTracingInit();

        [DllImport(__DllName, EntryPoint = "AUTDLinkSOEMTracingInitWithFile", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ResultStatus AUTDLinkSOEMTracingInitWithFile(byte* path);

        [DllImport(__DllName, EntryPoint = "AUTDLinkSOEM", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ResultLink AUTDLinkSOEM(ConstPtr err_handler, ConstPtr err_context, SOEMOption option, SleeperWrap sleeper);

        [DllImport(__DllName, EntryPoint = "AUTDLinkSOEMIsDefault", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool AUTDLinkSOEMIsDefault(SOEMOption option);

        [DllImport(__DllName, EntryPoint = "AUTDLinkSOEMStatusGetMsg", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint AUTDLinkSOEMStatusGetMsg(Status src, byte* dst);

        [DllImport(__DllName, EntryPoint = "AUTDLinkRemoteSOEM", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ResultLink AUTDLinkRemoteSOEM(byte* addr);

        [DllImport(__DllName, EntryPoint = "AUTDLinkSOEMThreadPriorityMin", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ThreadPriorityPtr AUTDLinkSOEMThreadPriorityMin();

        [DllImport(__DllName, EntryPoint = "AUTDLinkSOEMThreadPriorityCrossplatform", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ThreadPriorityPtr AUTDLinkSOEMThreadPriorityCrossplatform(byte value);

        [DllImport(__DllName, EntryPoint = "AUTDLinkSOEMThreadPriorityMax", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ThreadPriorityPtr AUTDLinkSOEMThreadPriorityMax();


    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct EthernetAdaptersPtr
    {
        public IntPtr Item1;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct SOEMOption
    {
        public byte* ifname;
        public uint buf_size;
        public Duration send_cycle;
        public Duration sync0_cycle;
        public ProcessPriority process_priority;
        public ThreadPriorityPtr thread_priority;
        public Duration state_check_interval;
        public Duration sync_tolerance;
        public Duration sync_timeout;
        public int affinity;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ThreadPriorityPtr
    {
        public IntPtr Item1;
    }



}
